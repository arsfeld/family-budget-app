// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Families (core authentication unit)
model Family {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  
  users           User[]
  monthlyOverviews MonthlyOverview[]
  categories      Category[]
  onboarding      FamilyOnboarding?
  chatConversations ChatConversation[]
}

// Users (belong to families)
model User {
  id           String    @id @default(cuid())
  familyId     String
  email        String    @unique
  passwordHash String?   // Optional for unverified users
  name         String
  isVerified   Boolean   @default(false)
  invitedBy    String?   // ID of user who invited them
  invitedAt    DateTime?
  verifiedAt   DateTime?
  createdAt    DateTime  @default(now())
  
  family       Family        @relation(fields: [familyId], references: [id])
  userIncome   UserIncome[]
  incomes      Income[]
  userExpenses UserExpense[]
  chatConversations ChatConversation[]
}

// Monthly Overviews (multiple scenarios per family)
model MonthlyOverview {
  id         String    @id @default(cuid())
  familyId   String
  name       String    // e.g., "Current", "Planned", "Conservative"
  isActive   Boolean   @default(false)
  isArchived Boolean   @default(false)
  archivedAt DateTime?
  createdAt  DateTime  @default(now())
  
  family       Family        @relation(fields: [familyId], references: [id])
  userIncome   UserIncome[]
  incomes      Income[]
  userExpenses UserExpense[]
  
  @@index([familyId, isActive])
  @@index([familyId, isArchived])
}

// Income (flexible income sources - can be tied to a person or not)
model Income {
  id               String  @id @default(cuid())
  overviewId       String
  userId           String? // Optional - can be family income not tied to a person
  name             String  // e.g., "John's Salary", "Rental Property", "Investment Returns"
  type             String  // salary, freelance, property, investment, business, other
  amount           Decimal @db.Decimal(10, 2)
  frequency        String  @default("monthly") // weekly, biweekly, semimonthly, monthly, yearly, one-time
  monthlyAmount    Decimal @db.Decimal(10, 2) // calculated monthly amount
  isActive         Boolean @default(true)
  startDate        DateTime?
  endDate          DateTime?
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  overview MonthlyOverview @relation(fields: [overviewId], references: [id], onDelete: Cascade)
  user     User?           @relation(fields: [userId], references: [id])
  
  @@index([overviewId])
  @@index([overviewId, userId])
  @@index([type])
}

// Legacy UserIncome - kept for migration purposes, will be removed later
model UserIncome {
  id               String  @id @default(cuid())
  overviewId       String
  userId           String
  salaryAmount     Decimal @db.Decimal(10, 2) @default(0)
  salaryFrequency  String  @default("monthly") // weekly, biweekly, semimonthly, monthly, yearly
  monthlySalary    Decimal @db.Decimal(10, 2) // calculated monthly amount
  additionalIncome Decimal @db.Decimal(10, 2) @default(0)
  notes            String?
  
  overview MonthlyOverview @relation(fields: [overviewId], references: [id], onDelete: Cascade)
  user     User            @relation(fields: [userId], references: [id])
  
  @@unique([overviewId, userId])
}

// User Expenses (monthly fixed costs)
model UserExpense {
  id              String  @id @default(cuid())
  overviewId      String
  userId          String
  categoryId      String
  name            String  @default("") // Display name for the expense
  amount          Decimal @db.Decimal(10, 2)
  isShared        Boolean @default(false)
  sharePercentage Int?    // Percentage this user pays if shared
  notes           String?
  
  overview MonthlyOverview @relation(fields: [overviewId], references: [id], onDelete: Cascade)
  user     User            @relation(fields: [userId], references: [id])
  category Category        @relation(fields: [categoryId], references: [id])
  
  @@index([overviewId, userId])
}

// Expense Categories
model Category {
  id       String  @id @default(cuid())
  familyId String
  name     String
  icon     String?
  color    String?
  
  family       Family       @relation(fields: [familyId], references: [id])
  userExpenses UserExpense[]
  
  @@index([familyId])
}

// Unified Email Token table for all token types
model EmailToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  type      String   // "verification" | "password_reset" | "invitation"
  expires   DateTime
  createdAt DateTime @default(now())
  
  // Additional fields for invitation tokens
  familyId  String?  // Only used for invitation tokens
  invitedBy String?  // User ID who sent the invitation (for invitations)
  
  @@index([email, type])
  @@index([token])
}

// AI-Powered Onboarding
model FamilyOnboarding {
  id                String   @id @default(cuid())
  familyId          String   @unique
  family            Family   @relation(fields: [familyId], references: [id])
  
  // Family composition
  adultsCount       Int?
  childrenCount     Int?
  childrenAges      Json?    // Array of ages
  
  // Financial overview
  primaryIncome     Decimal? @db.Decimal(10, 2)
  secondaryIncome   Decimal? @db.Decimal(10, 2)
  otherIncome       Decimal? @db.Decimal(10, 2)
  hasInvestments    Boolean  @default(false)
  investmentTypes   Json?    // Array of investment types
  monthlyInvestmentAmount Decimal? @db.Decimal(10, 2)
  
  // Housing
  housingType       String?  // rent, mortgage, owned
  housingCost       Decimal? @db.Decimal(10, 2)
  
  // Goals and preferences
  savingsGoal       Decimal? @db.Decimal(10, 2)
  financialGoals    Json?    // Array of goals
  budgetPriorities  Json?    // Array of priorities
  
  // Conversation history
  conversations     OnboardingConversation[]
  
  completedAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model OnboardingConversation {
  id             String   @id @default(cuid())
  onboardingId   String
  onboarding     FamilyOnboarding @relation(fields: [onboardingId], references: [id])
  
  role           String   // 'user' or 'assistant'
  content        String   @db.Text
  metadata       Json?    // Store extracted entities, intents
  
  createdAt      DateTime @default(now())
  
  @@index([onboardingId])
}

// Chat conversations - stores entire chat sessions
model ChatConversation {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  familyId  String
  family    Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  
  title     String?  // Auto-generated title or first message snippet
  messages  Json     // Store all messages with their parts
  metadata  Json?    // Store any additional metadata (model used, tokens, etc.)
  
  isActive  Boolean  @default(false) // Only one active chat per user
  lastMessageAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId, lastMessageAt])
  @@index([familyId])
  @@index([userId, isActive])
}